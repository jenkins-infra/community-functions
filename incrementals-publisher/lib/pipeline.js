/*
 * This module has a few functions which help process Pipeline related metadata
 */
module.exports = {
  /*
   * takes in a JSON object expected to be returned by JSON API
   * requests to Jenkins such as:
   * https://ci.jenkins.io/job/structs-plugin/job/PR-36/3/api/json?tree=actions[revision[hash,pullHash]]
   *
   * @return Object containing a `hash` property
   */
  processBuildMetadata: (metadata) => {
    let response = {};
    if (metadata.actions) {
      for (const action of metadata.actions) {
        if (action._class === 'jenkins.scm.api.SCMRevisionAction' && action.revision) {
          response.hash = action.revision.hash || action.revision.pullHash;
          return response
        }
        if (action._class === 'hudson.plugins.git.util.BuildDetails' && action.build && action.build.revision) {
          response.hash = action.build.revision.SHA1;
          return response
        }
      }
    }
    return response;
  },

  /*
   * Return a generated API URL for fetching specific commit information for
   * this Pipeline
   */
  getBuildApiUrl: (build_url) => {
    return build_url + 'api/json?tree=actions[revision[hash,pullHash]]';
  },

  /*
   * takes in a JSON object expected to be returned by JSON API
   * requests to Jenkins such as:
   * https://ci.jenkins.io/job/structs-plugin/api/json?tree=sources[source[repoOwner,repository]]
   *
   * @return Object containing `owner` and `repo` properties
   */
  processFolderMetadata: (metadata) => {
    let response = {};

    if (metadata.sources) {
      metadata.sources.forEach((source) => {
        response.owner = source.source.repoOwner;
        response.repo = source.source.repository;
      });
    }

    return response;
  },

  /*
   * Return a generated API URL for fetching repository information for
   * this Pipeline
   */
  getFolderApiUrl: (build_url) => {
    return build_url + '../../../api/json?tree=sources[source[repoOwner,repository]]';
  },

  /*
   * Return the generated URL to the archive.zip generated by some incrementals
   * build tooling (consult JEP-305)
   */
  getArchiveUrl: (build_url, hash) => {
    let shortHash = hash.substring(0, 12);
    return build_url + 'artifact/**/*-rc*.' + shortHash + '/*-rc*.' + shortHash + '*/*zip*/archive.zip';
  }
};
